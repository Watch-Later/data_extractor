name: Python package

on: [push]

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.7, 3.8]

    steps:
    - uses: actions/checkout@v1
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}
    # cache poetry virtualenv dir may be faster
    - name: Caches
      uses: actions/cache@v1
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-
          ${{ runner.os }}-
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip poetry
        make POETRY_EXTRAS= init_by_poetry
    - name: Lint
      run: |
        make POETRY_EXTRAS=lint init_by_poetry
        make check-all
    - name: Test without JSON extractor backend
      run: |
        make deinit
        make POETRY_EXTRAS=test init_by_poetry
        make cov
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v1.0.5
      with:
        # Repository upload token - get it from codecov.io
        token: ${{ secrets.CODECOV_TOKEN }}
        # Flag the upload to group coverage metrics (unittests, uitests, etc.)
        flags: test_without_json_extractor_backend
        # Specify whether or not CI build should fail if Codecov runs into an error during upload
        fail_ci_if_error: true
    - name: Test with JSON extractor backend
      run: |
        make POETRY_EXTRAS='test jsonpath-rw jsonpath-rw-ext' init_by_poetry
        make cov
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v1.0.5
      with:
        # Repository upload token - get it from codecov.io
        token: ${{ secrets.CODECOV_TOKEN }}
        # Flag the upload to group coverage metrics (unittests, uitests, etc.)
        flags: test_with_json_extractor_backend
        # Specify whether or not CI build should fail if Codecov runs into an error during upload
        fail_ci_if_error: true
    # Build, Upload and Publish to PYPI and GitHub Release
    - name: Build release
      run: poetry build
    - name: Upload release
      uses: actions/upload-artifact@v1
      with:
        name: dist
        path: dist
    - name: Publish release to PYPI
      if: startsWith(github.ref, 'refs/tags/') && matrix.python-version == 3.8
      run: poetry publish -u ${{ secrets.PYPI_USERNAME }} -p ${{ secrets.PYPI_PASSWORD }}
    - name: Publish release to GitHub Release
      if: startsWith(github.ref, 'refs/tags/') && matrix.python-version == 3.8
      uses: softprops/action-gh-release@v1
      with:
        files: dist/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
